<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from org.civicoop.documents/xml/schema/CRM/Documents/Document.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:8b4c5cfce301db7e9d835438eee5f563)
 */
use CRM_Documents_ExtensionUtil as E;

/**
 * Database access object for the Document entity.
 */
class CRM_Documents_DAO_Document extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_document';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Unique Document ID
   *
   * @var int
   */
  public $id;

  /**
   * @var string
   */
  public $subject;

  /**
   * @var int
   */
  public $type_id;

  /**
   * @var int
   */
  public $status_id;

  /**
   * FK to Contact
   *
   * @var int
   */
  public $added_by;

  /**
   * @var datetime
   */
  public $date_added;

  /**
   * FK to Contact
   *
   * @var int
   */
  public $updated_by;

  /**
   * @var datetime
   */
  public $date_updated;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_document';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Documents') : E::ts('Document');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'added_by', 'civicrm_contact', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'updated_by', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique Document ID'),
          'required' => TRUE,
          'where' => 'civicrm_document.id',
          'table_name' => 'civicrm_document',
          'entity' => 'Document',
          'bao' => 'CRM_Documents_DAO_Document',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'subject' => [
          'name' => 'subject',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Subject'),
          'required' => FALSE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_document.subject',
          'table_name' => 'civicrm_document',
          'entity' => 'Document',
          'bao' => 'CRM_Documents_DAO_Document',
          'localizable' => 0,
          'add' => NULL,
        ],
        'type_id' => [
          'name' => 'type_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Type'),
          'where' => 'civicrm_document.type_id',
          'default' => 'NULL',
          'table_name' => 'civicrm_document',
          'entity' => 'Document',
          'bao' => 'CRM_Documents_DAO_Document',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'document_type',
            'optionEditPath' => 'civicrm/admin/options/document_type',
          ],
          'add' => NULL,
        ],
        'status_id' => [
          'name' => 'status_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Status'),
          'where' => 'civicrm_document.status_id',
          'default' => 'NULL',
          'table_name' => 'civicrm_document',
          'entity' => 'Document',
          'bao' => 'CRM_Documents_DAO_Document',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'document_status',
            'optionEditPath' => 'civicrm/admin/options/document_status',
          ],
          'add' => NULL,
        ],
        'added_by' => [
          'name' => 'added_by',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Added by'),
          'description' => E::ts('FK to Contact'),
          'required' => FALSE,
          'where' => 'civicrm_document.added_by',
          'table_name' => 'civicrm_document',
          'entity' => 'Document',
          'bao' => 'CRM_Documents_DAO_Document',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'html' => [
            'type' => 'EntityRef',
          ],
          'add' => NULL,
        ],
        'date_added' => [
          'name' => 'date_added',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Date Added'),
          'required' => FALSE,
          'where' => 'civicrm_document.date_added',
          'table_name' => 'civicrm_document',
          'entity' => 'Document',
          'bao' => 'CRM_Documents_DAO_Document',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
          ],
          'add' => NULL,
        ],
        'updated_by' => [
          'name' => 'updated_by',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Updated by'),
          'description' => E::ts('FK to Contact'),
          'required' => FALSE,
          'where' => 'civicrm_document.updated_by',
          'table_name' => 'civicrm_document',
          'entity' => 'Document',
          'bao' => 'CRM_Documents_DAO_Document',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'html' => [
            'type' => 'EntityRef',
          ],
          'add' => NULL,
        ],
        'date_updated' => [
          'name' => 'date_updated',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Date Updated'),
          'required' => FALSE,
          'where' => 'civicrm_document.date_updated',
          'table_name' => 'civicrm_document',
          'entity' => 'Document',
          'bao' => 'CRM_Documents_DAO_Document',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'document', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'document', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
